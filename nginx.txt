Rate Limiting i NGINX

Purpose:
    - slow down brute‑force password‑guessing attacks
    - protect against DDoS attacks 
    - log identify the targeted URLs
    - protect upstream application servers from being overwhelmed

Leaky bucket algorithm

Configuring Basic Rate Limiting
    - limit_req_zone = define parameters and we put in defined in the http block
            parameters
                key:client’s IP address  
                    $binary_remote_addr (binary format which is less space than $remote_addr -string format)
                Zone:shared memory zone  = to store state of each ip-address
                    zone=mylimit:10m        mylimit  (define zone name=mylimit)
                                            10m (10 megabyte can keep up to 16000 ip-address)
                                            if nginx memory full : it show 503 (Service Temporarily Unavailable)
                rate:max request rate
                    10 r/s = 10 request per second  ( or 1 request every 0.1 second)
                    ()

    - limit_req = apply the limit (limit_req_zone) to a specific location or server bloc

    - Handle Bursts 
        1. if request exceed NGINX returns status code 503 to the client.
        or 
        2. Set queue size burst=20  (without nodely): //not reccomended
            if 22 request from same address at the same time, only 1 send to upstream server 
            the rest 20 request put in queue (and send to server 1 request 
                in every 0.1 second at a time or take 2 secons for 20 queue)
            the last 1 NGINX return status code 503 to the client
        3. burst=20 nodely //reccomended 
            if 25 request from same address at the same time, 21 request send to 
                upstream server (no need to send 1 at a time)
            but 20 queue status=taken (all queue is fully taken)
            remaing 4 request reject with status 503 to client

/**************/
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;
 
server {
    location /login/ {
        limit_req zone=mylimit burst=20 nodely;
        
        proxy_pass http://my_upstream;
    }
}
/****************/
 
===========================
===========================
===========================

Config  Two-Stage Rate Limiting (With NGINX Plus R17 or NGINX Open Source 1.15.7 )

    Example set up below 
        - rate=5r/s     5 requests per second (r/s).
        - burst=12      12 requests in queue
        - delay=8       8 request processed without delay (with 8 queue is taken)
                        
    if 15 request from the same client at the same time
        - 8 request send to server immediately
        - 4 request wait in queue
        - 3 request is reject with status 503 to client

limit_req_zone $binary_remote_addr zone=ip:10m rate=5r/s;

server {
    listen 80;
    location / {
        limit_req zone=ip burst=12 delay=8;
        proxy_pass http://website;
    }
}


=======================================
=======================================
=======================================
=======================================
Advanced Configuration Examples

Whitelisting
For those in "whitelist" there is no rate limit
Other have a rate limit

Whitelist 
    10.0.0.0/8 0;     0=""  not in $binary_remote_addr , are not limited
    192.168.0.0/24 0; 0=""  not in $binary_remote_addr , are not limited
Other
    default 1         1=$binary_remote_add  impose rate limiting


/*************/
geo $limit {
    default 1;
    10.0.0.0/8 0;
    192.168.0.0/24 0;
}
 
map $limit $limit_key {
    0 "";
    1 $binary_remote_addr;
}
 
limit_req_zone $limit_key zone=req_zone:10m rate=5r/s;
 
server {
    location / {
        limit_req zone=req_zone burst=10 nodelay;
 
        # ...
    }
}

=======================================
=======================================
=======================================
=======================================
Including Multiple limit_req Directives in a Location
- there are many rate limiting (example=2), 
    - most restrictive one is used to allow to server backend (best case)
    - but request reject if it fail either rate limiting (both case)

        10.0.0.0/8 0;
        192.168.0.0/24 0;  
            in $binary_remote_addr  => not limited by zone=req_zone_wl:10m rate=15r/s;
            in ""                   => but limited in one=req_zone:10m rate=5r/s

http {
    # ...
    geo $limit {
        default 1;
        10.0.0.0/8 0;
        192.168.0.0/24 0;
    }
 
    map $limit $limit_key {
        0 "";
        1 $binary_remote_addr;           
    }
    
    limit_req_zone $limit_key zone=req_zone:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=req_zone_wl:10m rate=15r/s;
 
    server {
        # ...
        location / {
            limit_req zone=req_zone burst=10 nodelay;
            limit_req zone=req_zone_wl burst=20 nodelay;
            # ...
        }
    }
}

=========================
=========================
=========================
=========================
Configuring Related Features

By default, NGINX logs requests that are delayed or dropped due to rate limiting

2015/06/13 04:20:00 [error] 120315#0: *32086 limiting requests, 
excess: 1.000 by zone "mylimit", client: 192.168.1.2, 
server: nginx.com, request: "GET / HTTP/1.0", host: "nginx.com"

    limiting requests – Indicator that the log entry records a rate limit
    excess – Number of requests per millisecond over the configured rate that this request represents
    zone – Zone that defines the imposed rate limit
    client – IP address of the client making the request
    server – IP address or hostname of the server
    request – Actual HTTP request made by the client
    host – Value of the Host HTTP header

======================
By default, NGINX logs refused requests at the error level, 
as shown by [error] in the example above. 
(It logs delayed requests at one level lower, so warn by default.) 
To change the logging level, use the limit_req_log_level directive. 
Here we set refused requests to log at the warn level:


location /login/ {
    limit_req zone=mylimit burst=20 nodelay;
    limit_req_log_level warn;
 
    proxy_pass http://my_upstream;
}
======================
Error Code Sent to Client
By default NGINX responds with status code 503 (Service Temporarily Unavailable) 
when a client exceeds its rate limit. Use the limit_req_status directive 
to set a different status code (444 in this example):

location /login/ {
    limit_req zone=mylimit burst=20 nodelay;
    limit_req_status 444;
}
======================
Denying All Requests to a Specific Location

If you want to deny all requests for a specific URL, (close this api)
rather than just limiting them, configure a location block for it and include the deny all directive:

location /foo.php {
    deny all;
}
========================
